Import java.util.Random; // This is for the random number generator
public class DiseaseSimulation {
public static void main(String[] args) {
        
int N = 7; // Size of the grid 7x7
String [][] grid = new String[N][N];

Random random = new Random ();
double infectionRate = 0.3;
double recoveryRate= 0.1;

for (int i = 0; i < size; i++) {
	for (int j = 0; j < size; j++) {
		grid[i][j] = “H”


}
}
int initial


} 
}





import java.util.Random;

public class SimpleEpidemic {

    public static void main(String[] args) throws InterruptedException {
        int size = 7;
        String[][] city = new String[size][size];
        Random random = new Random();
        double infectionChance = 0.3;
        double recoveryChance = 0.1;

       // Initialize everyone as healthy (H) with one initially sick (S)
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                city[i][j] = "H"; // Initialize everyone as Healthy
            }
        }
        // Randomly select one person to be initially sick
        int initialSickRow = random.nextInt(size);
        int initialSickCol = random.nextInt(size);
        city[initialSickRow][initialSickCol] = "S"; // Set one person as Sick


                }
            }
        }

        System.out.println("Start:");
        printCity(city);
        System.out.println("Sick: " + countSick(city) + ", Healthy: " + countHealthy(city) + ", Recovered: " + countRecovered(city));

        for (int time = 1; time <= 20; time++) {
            String[][] nextCity = new String[size][size];

            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    nextCity[i][j] = city[i][j]; // Assume no change

                    if (city[i][j].equals("S")) {
                        // Try to recover
                        if (random.nextDouble() < recoveryChance) {
                            nextCity[i][j] = "R"; // R for Recovered
                        } else {
                            // Try to infect neighbors
                            int[] dr = {-1, 1, 0, 0};
                            int[] dc = {0, 0, -1, 1};

                            for (int k = 0; k < 4; k++) {
                                int ni = i + dr[k];
                                int nj = j + dc[k];

                                if (ni >= 0 && ni < size && nj >= 0 && nj < size && city[ni][nj].equals("H")) {
                                    if (random.nextDouble() < infectionChance) {
                                        nextCity[ni][nj] = "S";
                                    }
                                }
                            }
                        }
                    }
                }
            }
            city = nextCity; // Update the city for the next time step

            System.out.println("\nTime " + time + ":");
            printCity(city);
            System.out.println("Sick: " + countSick(city) + ", Healthy: " + countHealthy(city) + ", Recovered: " + countRecovered(city));
            Thread.sleep(500);
        }
    }

    static void printCity(String[][] grid) {
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                System.out.print(grid[i][j] + " ");
            }
            System.out.println();
        }
    }

    static int countSick(String[][] grid) {
        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j].equals("S")) {
                    count++;
                }
            }
        }
        return count;
    }

    static int countHealthy(String[][] grid) {
        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j].equals("H")) {
                    count++;
                }
            }
        }
        return count;
    }

    static int countRecovered(String[][] grid) {
        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j].equals("R")) {
                    count++;
                }
            }
        }
        return count;
    }
}

